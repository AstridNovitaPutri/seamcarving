import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color, transform

def energy_map(image):
    grayscale_image = color.rgb2gray(image)
    gradient_x = np.gradient(grayscale_image, axis=1)
    gradient_y = np.gradient(grayscale_image, axis=0)
    energy_map = np.sqrt(gradient_x**2 + gradient_y**2)
    print(energy_map,"energy map")
    return energy_map

def find_seam(energy_map):
    rows, cols = energy_map.shape
    cumulative_energy = np.zeros_like(energy_map)
    cumulative_energy[0, :] = energy_map[0, :]

    for i in range(1, rows):
        for j in range(cols):
            if j == 0:
                cumulative_energy[i, j] = energy_map[i, j] + min(cumulative_energy[i-1, j], cumulative_energy[i-1, j+1])
            elif j == cols - 1:
                cumulative_energy[i, j] = energy_map[i, j] + min(cumulative_energy[i-1, j-1], cumulative_energy[i-1, j])
            else:
                cumulative_energy[i, j] = energy_map[i, j] + min(cumulative_energy[i-1, j-1], cumulative_energy[i-1, j], cumulative_energy[i-1, j+1])

    seam = np.zeros(rows, dtype=int)
    seam[-1] = np.argmin(cumulative_energy[-1, :])

    for i in range(rows-2, -1, -1):
        if seam[i+1] == 0:
            seam[i] = np.argmin(cumulative_energy[i, :2])
        elif seam[i+1] == cols - 1:
            seam[i] = np.argmin(cumulative_energy[i, -2:]) + cols - 2
        else:
            seam[i] = np.argmin(cumulative_energy[i, seam[i+1]-1:seam[i+1]+2]) + seam[i+1] - 1

    print(seam,"Find the minimum energy seam")
    return seam

def remove_seam(image, seam):
    rows, cols, _ = image.shape
    new_image = np.zeros((rows, cols-1, 3))
    
    for i in range(rows):
        new_image[i, :, 0] = np.delete(image[i, :, 0], seam[i])
        new_image[i, :, 1] = np.delete(image[i, :, 1], seam[i])
        new_image[i, :, 2] = np.delete(image[i, :, 2], seam[i])

    print(new_image, "new Image")
    return new_image

def seam_carving(image, new_width, new_height):
    for _ in range(image.shape[1] - new_width):
        energy_map_image = energy_map(image)
        seam = find_seam(energy_map_image)
        image = remove_seam(image, seam)

    image = transform.resize(image, (new_height, new_width))

    print(image,"seam Carving")
    return image

if __name__ == "__main__":
    # Load your image
    input_image_path = "02.jpg"
    original_image = io.imread(input_image_path)
    print(original_image,"Load your image")

    # Set the new dimensions
    new_width = 300
    new_height = 200

    # Perform seam carving
    resized_image = seam_carving(original_image, new_width, new_height)
    print(resized_image,"Perform seam carving")

    # Display the results
    plt.figure(figsize=(10, 5))
    plt.subplot(1, 2, 1)
    plt.imshow(original_image)
    plt.title("Original Image")

    plt.subplot(1, 2, 2)
    plt.imshow(resized_image)
    plt.title("Seam Carved Image")

    plt.show()
